PROJECT = 'AesFileEncrypt'

DEFINES = {''} -- bug in lake 1.4.1

TESTDIR = J('.', 'test', 'bin')

if as_bool(FIXED_TABLES) then
  DEFINES = L{DEFINES, 'FIXED_TABLES'}
end

aes = c.shared{'aes';
  base     = 'aes';
  src      = {'aes_modes','aescrypt','aeskey','aestab'};
  defines  = L{DEFINES;
    IF(WINDOWS, 'DLL_EXPORT');
  };
  dynamic  = DYNAMIC;
}
target('aes', aes)

sha = c.shared{'sha';
  base     = 'sha';
  src      = {'sha1', 'sha2'};
  defines  = L{DEFINES;
    IF(WINDOWS, 'DLL_EXPORT');
  };
  incdir   = J('..', 'aes');
  dynamic  = DYNAMIC;
}
target('sha', sha)

shab = c.shared{'shab';
  base     = 'sha';
  src      = {'sha1b', 'sha2b'};
  defines  = L{DEFINES;
    IF(WINDOWS, 'DLL_EXPORT');
  };
  incdir   = J('..', 'aes');
  dynamic  = DYNAMIC;
}
target('shab', shab)

hmac1 = c.shared{'hmac1'; sha;
  base     = 'sha';
  src      = {'hmac'};
  defines  = L{DEFINES;
    IF(WINDOWS, 'DLL_EXPORT');
    "USE_SHA1";
  };
  incdir   = J('..', 'aes');
  dynamic  = DYNAMIC;
}
target('hmac1', hmac1)

hmac1b = c.shared{'hmac1b'; shab;
  base     = 'sha';
  src      = {'hmac'};
  defines  = L{DEFINES;
    IF(WINDOWS, 'DLL_EXPORT');
    "USE_SHA1";
  };
  incdir   = J('..', 'aes');
  dynamic  = DYNAMIC;
}
target('hmac1b', hmac1b)

hmac256 = c.shared{'hmac256'; sha;
  base     = 'sha';
  src      = {'hmac'};
  defines  = L{DEFINES;
    IF(WINDOWS, 'DLL_EXPORT');
    "USE_SHA256";
  };
  incdir   = J('..', 'aes');
  dynamic  = DYNAMIC;
}
target('hmac256', hmac256)

hmac256b = c.shared{'hmac256b'; shab;
  base     = 'sha';
  src      = {'hmac'};
  defines  = L{DEFINES;
    IF(WINDOWS, 'DLL_EXPORT');
    "USE_SHA256";
  };
  incdir   = J('..', 'aes');
  dynamic  = DYNAMIC;
}
target('hmac256b', hmac256b)

fileenc =  c.shared{'fileenc'; aes, sha, hmac1;
  base     = 'fileenc';
  src      = {'fileenc', J('..', 'sha', 'pwd2key')};
  defines  = L{DEFINES;
    IF(WINDOWS, 'DLL_EXPORT');
    "USE_SHA1";
  };
  incdir   = {
    J('..', 'aes');
    J('..', 'sha');
  };
  dynamic  = DYNAMIC;
}
target('fileenc', fileenc)

rfc3686 = c.program{'rfc3686'; aes;
  base   = J('test', 'rfc3686');
  src    = {'*.c'};
  incdir = J('..', '..', 'aes');
}
target('rfc3686', rfc3686)

avs = c.program{'avs'; aes;
  base   = J('test', 'avs');
  src    = '*.c';
  incdir = J('..', '..', 'aes');
}
target('avs', avs)

basic = c.program{'basic'; aes;
  base   = J('test', 'basic');
  src    = '*.c';
  incdir = J('..', '..', 'aes');
}
target('basic', basic)

rav = c.program{'rav'; aes;
  base   = J('test', 'rav');
  src    = {'*.c', J('..', 'basic', 'aesaux')};
  incdir = { J('..', '..', 'aes'), J('..', 'basic')};
}
target('rav', rav)

sha1_test = c.program{'sha1_test'; sha, hmac1;
  base         = 'sha';
  src          = {'pwd2key'};
  defines      = L{DEFINES;
    IF(WINDOWS, 'DLL_EXPORT');
    "USE_SHA1";
    "TEST";
  };
  incdir       = J('..', 'aes');
}
target('sha1_test', sha1_test)

sha1b_test = c.program{'sha1b_test'; shab, hmac1b;
  base         = 'sha';
  src          = {'pwd2key'};
  defines      = L{DEFINES;
    IF(WINDOWS, 'DLL_EXPORT');
    "USE_SHA1";
    "TEST";
  };
  incdir       = J('..', 'aes');
}
target('sha1b_test', sha1b_test)

sha256_test = c.program{'sha256_test'; sha, hmac256;
  base         = 'sha';
  src          = {'pwd2key'};
  defines      = L{DEFINES;
    IF(WINDOWS, 'DLL_EXPORT');
    "USE_SHA256";
    "TEST";
  };
  incdir       = J('..', 'aes');
}
target('sha256_test', sha256_test)

sha256b_test = c.program{'sha256b_test'; shab, hmac256b;
  base         = 'sha';
  src          = {'pwd2key'};
  defines      = L{DEFINES;
    IF(WINDOWS, 'DLL_EXPORT');
    "USE_SHA256";
    "TEST";
  };
  incdir       = J('..', 'aes');
}
target('sha256b_test', sha256b_test)

target('build', { aes, sha, shab, hmac1, hmac256, hmac1, hmac256b, fileenc })

local function JSO(...) return IF(WINDOWS, ..., J(...)) end

install_test = target('install_test', {
  file.group{odir = JSO(TESTDIR, 'aes'      ); src = aes          };
  file.group{odir = JSO(TESTDIR, 'fileenc'  ); src = fileenc      };
  file.group{odir = JSO(TESTDIR, 'sha'      ); src = sha          };
  file.group{odir = JSO(TESTDIR, 'sha'      ); src = shab         };
  file.group{odir = JSO(TESTDIR, 'sha'      ); src = hmac1        };
  file.group{odir = JSO(TESTDIR, 'sha'      ); src = hmac256      };
  file.group{odir = JSO(TESTDIR, 'sha'      ); src = hmac1b       };
  file.group{odir = JSO(TESTDIR, 'sha'      ); src = hmac256b     };

  file.group{odir = TESTDIR; src = basic        };
  file.group{odir = TESTDIR; src = rfc3686      };
  file.group{odir = TESTDIR; src = avs          };
  file.group{odir = TESTDIR; src = rav          };
  file.group{odir = TESTDIR; src = sha1_test    };
  file.group{odir = TESTDIR; src = sha256_test  };
  file.group{odir = TESTDIR; src = sha1b_test    };
  file.group{odir = TESTDIR; src = sha256b_test  };
  file.group{odir = TESTDIR; src = J('test', 'data', '*.rsp')};
  file.group{odir = TESTDIR; src = J('test', 'data', '*.txt')};
})

test = target('test', install_test, function()
  exec_test(J('.', basic.name       ))
  exec_test(J('.', rfc3686.name     ))
  exec_test(J('.', avs.name         ))
  exec_test(J('.', rav.name         ), "/t:k")
  exec_test(J('.', rav.name         ), "/t:n")
  -- exec_test(J('.', rav.name         ), "/t:e")
  -- exec_test(J('.', rav.name         ), "/t:c")
  exec_test(J('.', sha1_test.name   ))
  exec_test(J('.', sha256_test.name ))
  exec_test(J('.', sha1b_test.name  ))
  exec_test(J('.', sha256b_test.name))
  if not test_summary() then
    quit("test fail")
  end
end)
